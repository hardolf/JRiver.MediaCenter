//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:LyricWiki", ConfigurationName="LyricWikiServiceReference.LyricWikiPortType")]
    public interface LyricWikiPortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#checkSongExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        bool checkSongExists(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#checkSongExists", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<bool> checkSongExistsAsync(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#searchArtists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string[] searchArtists(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#searchArtists", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string[]> searchArtistsAsync(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#searchAlbums", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string[] searchAlbums(string artist, string album, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#searchAlbums", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string[]> searchAlbumsAsync(string artist, string album, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#searchSongs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SongResult searchSongs(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#searchSongs", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SongResult> searchSongsAsync(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getSOTD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SOTDResult getSOTD();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getSOTD", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SOTDResult> getSOTDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getSong", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult getSong(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getSong", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult> getSongAsync(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getSongResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="songResult")]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult getSongResult(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getSongResult", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="songResult")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult> getSongResultAsync(string artist, string song);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getArtist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistResponse getArtist(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getArtist", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistResponse> getArtistAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getAlbum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumResponse getAlbum(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getAlbum", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumResponse> getAlbumAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getHometown", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownResponse getHometown(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getHometown", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownResponse> getHometownAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getTopSongs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="topSongs")]
        string[] getTopSongs(string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#getTopSongs", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="topSongs")]
        System.Threading.Tasks.Task<string[]> getTopSongsAsync(string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postArtist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistResponse postArtist(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postArtist", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistResponse> postArtistAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postAlbum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumResponse postAlbum(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postAlbum", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumResponse> postAlbumAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postSong", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongResponse postSong(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postSong", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongResponse> postSongAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postSong_flags", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsResponse postSong_flags(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:LyricWiki#postSong_flags", ReplyAction="*")]
        System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsResponse> postSong_flagsAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:LyricWiki")]
    public partial class SongResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string artistField;
        
        private string songField;
        
        /// <remarks/>
        public string artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
                this.RaisePropertyChanged("artist");
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
                this.RaisePropertyChanged("song");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:LyricWiki")]
    public partial class LyricsResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string artistField;
        
        private string songField;
        
        private string lyricsField;
        
        private string urlField;
        
        /// <remarks/>
        public string artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
                this.RaisePropertyChanged("artist");
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
                this.RaisePropertyChanged("song");
            }
        }
        
        /// <remarks/>
        public string lyrics {
            get {
                return this.lyricsField;
            }
            set {
                this.lyricsField = value;
                this.RaisePropertyChanged("lyrics");
            }
        }
        
        /// <remarks/>
        public string url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
                this.RaisePropertyChanged("url");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:LyricWiki")]
    public partial class SOTDResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string artistField;
        
        private string songField;
        
        private string nominatedByField;
        
        private string reasonField;
        
        private string lyricsField;
        
        /// <remarks/>
        public string artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
                this.RaisePropertyChanged("artist");
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
                this.RaisePropertyChanged("song");
            }
        }
        
        /// <remarks/>
        public string nominatedBy {
            get {
                return this.nominatedByField;
            }
            set {
                this.nominatedByField = value;
                this.RaisePropertyChanged("nominatedBy");
            }
        }
        
        /// <remarks/>
        public string reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
                this.RaisePropertyChanged("reason");
            }
        }
        
        /// <remarks/>
        public string lyrics {
            get {
                return this.lyricsField;
            }
            set {
                this.lyricsField = value;
                this.RaisePropertyChanged("lyrics");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getArtist", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class getArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        public getArtistRequest() {
        }
        
        public getArtistRequest(string artist) {
            this.artist = artist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getArtistResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class getArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string[] albums;
        
        public getArtistResponse() {
        }
        
        public getArtistResponse(string artist, string[] albums) {
            this.artist = artist;
            this.albums = albums;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getAlbum", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class getAlbumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string album;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public int year;
        
        public getAlbumRequest() {
        }
        
        public getAlbumRequest(string artist, string album, int year) {
            this.artist = artist;
            this.album = album;
            this.year = year;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getAlbumResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class getAlbumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string album;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public int year;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string amazonLink;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string imgUrl;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string url;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public string[] songs;
        
        public getAlbumResponse() {
        }
        
        public getAlbumResponse(string artist, string album, int year, string amazonLink, string imgUrl, string url, string[] songs) {
            this.artist = artist;
            this.album = album;
            this.year = year;
            this.amazonLink = amazonLink;
            this.imgUrl = imgUrl;
            this.url = url;
            this.songs = songs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getHometown", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class getHometownRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        public getHometownRequest() {
        }
        
        public getHometownRequest(string artist) {
            this.artist = artist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getHometownResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class getHometownResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string state;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string hometown;
        
        public getHometownResponse() {
        }
        
        public getHometownResponse(string country, string state, string hometown) {
            this.country = country;
            this.state = state;
            this.hometown = hometown;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postArtist", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public bool overwriteIfExists;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string[] albums;
        
        public postArtistRequest() {
        }
        
        public postArtistRequest(bool overwriteIfExists, string artist, string[] albums) {
            this.overwriteIfExists = overwriteIfExists;
            this.artist = artist;
            this.albums = albums;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postArtistResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public bool dataUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string message;
        
        public postArtistResponse() {
        }
        
        public postArtistResponse(string artist, bool dataUsed, string message) {
            this.artist = artist;
            this.dataUsed = dataUsed;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postAlbum", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postAlbumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public bool overwriteIfExists;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string album;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public int year;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string asin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string[] songs;
        
        public postAlbumRequest() {
        }
        
        public postAlbumRequest(bool overwriteIfExists, string artist, string album, int year, string asin, string[] songs) {
            this.overwriteIfExists = overwriteIfExists;
            this.artist = artist;
            this.album = album;
            this.year = year;
            this.asin = asin;
            this.songs = songs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postAlbumResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postAlbumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string album;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public int year;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public bool dataUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string message;
        
        public postAlbumResponse() {
        }
        
        public postAlbumResponse(string artist, string album, int year, bool dataUsed, string message) {
            this.artist = artist;
            this.album = album;
            this.year = year;
            this.dataUsed = dataUsed;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postSong", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postSongRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public bool overwriteIfExists;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string song;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string lyrics;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string language;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string[] onAlbums;
        
        public postSongRequest() {
        }
        
        public postSongRequest(bool overwriteIfExists, string artist, string song, string lyrics, string language, string[] onAlbums) {
            this.overwriteIfExists = overwriteIfExists;
            this.artist = artist;
            this.song = song;
            this.lyrics = lyrics;
            this.language = language;
            this.onAlbums = onAlbums;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postSongResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postSongResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string song;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public bool dataUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string message;
        
        public postSongResponse() {
        }
        
        public postSongResponse(string artist, string song, bool dataUsed, string message) {
            this.artist = artist;
            this.song = song;
            this.dataUsed = dataUsed;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postSong_flags", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postSong_flagsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public bool overwriteIfExists;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string song;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string lyrics;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string[] onAlbums;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string flags;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public string language;
        
        public postSong_flagsRequest() {
        }
        
        public postSong_flagsRequest(bool overwriteIfExists, string artist, string song, string lyrics, string[] onAlbums, string flags, string language) {
            this.overwriteIfExists = overwriteIfExists;
            this.artist = artist;
            this.song = song;
            this.lyrics = lyrics;
            this.onAlbums = onAlbums;
            this.flags = flags;
            this.language = language;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postSong_flagsResponse", WrapperNamespace="urn:LyricWiki", IsWrapped=true)]
    public partial class postSong_flagsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string song;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public bool dataUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string message;
        
        public postSong_flagsResponse() {
        }
        
        public postSong_flagsResponse(string artist, string song, bool dataUsed, string message) {
            this.artist = artist;
            this.song = song;
            this.dataUsed = dataUsed;
            this.message = message;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LyricWikiPortTypeChannel : MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LyricWikiPortTypeClient : System.ServiceModel.ClientBase<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType>, MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType {
        
        public LyricWikiPortTypeClient() {
        }
        
        public LyricWikiPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LyricWikiPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LyricWikiPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LyricWikiPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool checkSongExists(string artist, string song) {
            return base.Channel.checkSongExists(artist, song);
        }
        
        public System.Threading.Tasks.Task<bool> checkSongExistsAsync(string artist, string song) {
            return base.Channel.checkSongExistsAsync(artist, song);
        }
        
        public string[] searchArtists(string searchString) {
            return base.Channel.searchArtists(searchString);
        }
        
        public System.Threading.Tasks.Task<string[]> searchArtistsAsync(string searchString) {
            return base.Channel.searchArtistsAsync(searchString);
        }
        
        public string[] searchAlbums(string artist, string album, int year) {
            return base.Channel.searchAlbums(artist, album, year);
        }
        
        public System.Threading.Tasks.Task<string[]> searchAlbumsAsync(string artist, string album, int year) {
            return base.Channel.searchAlbumsAsync(artist, album, year);
        }
        
        public MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SongResult searchSongs(string artist, string song) {
            return base.Channel.searchSongs(artist, song);
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SongResult> searchSongsAsync(string artist, string song) {
            return base.Channel.searchSongsAsync(artist, song);
        }
        
        public MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SOTDResult getSOTD() {
            return base.Channel.getSOTD();
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.SOTDResult> getSOTDAsync() {
            return base.Channel.getSOTDAsync();
        }
        
        public MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult getSong(string artist, string song) {
            return base.Channel.getSong(artist, song);
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult> getSongAsync(string artist, string song) {
            return base.Channel.getSongAsync(artist, song);
        }
        
        public MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult getSongResult(string artist, string song) {
            return base.Channel.getSongResult(artist, song);
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricsResult> getSongResultAsync(string artist, string song) {
            return base.Channel.getSongResultAsync(artist, song);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.getArtist(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistRequest request) {
            return base.Channel.getArtist(request);
        }
        
        public string[] getArtist(ref string artist) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistRequest();
            inValue.artist = artist;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).getArtist(inValue);
            artist = retVal.artist;
            return retVal.albums;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistResponse> getArtistAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getArtistRequest request) {
            return base.Channel.getArtistAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.getAlbum(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumRequest request) {
            return base.Channel.getAlbum(request);
        }
        
        public string getAlbum(ref string artist, ref string album, ref int year, out string imgUrl, out string url, out string[] songs) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumRequest();
            inValue.artist = artist;
            inValue.album = album;
            inValue.year = year;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).getAlbum(inValue);
            artist = retVal.artist;
            album = retVal.album;
            year = retVal.year;
            imgUrl = retVal.imgUrl;
            url = retVal.url;
            songs = retVal.songs;
            return retVal.amazonLink;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumResponse> getAlbumAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getAlbumRequest request) {
            return base.Channel.getAlbumAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.getHometown(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownRequest request) {
            return base.Channel.getHometown(request);
        }
        
        public string getHometown(string artist, out string state, out string hometown) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownRequest();
            inValue.artist = artist;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).getHometown(inValue);
            state = retVal.state;
            hometown = retVal.hometown;
            return retVal.country;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownResponse> getHometownAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.getHometownRequest request) {
            return base.Channel.getHometownAsync(request);
        }
        
        public string[] getTopSongs(string limit) {
            return base.Channel.getTopSongs(limit);
        }
        
        public System.Threading.Tasks.Task<string[]> getTopSongsAsync(string limit) {
            return base.Channel.getTopSongsAsync(limit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.postArtist(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistRequest request) {
            return base.Channel.postArtist(request);
        }
        
        public bool postArtist(bool overwriteIfExists, ref string artist, string[] albums, out string message) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistRequest();
            inValue.overwriteIfExists = overwriteIfExists;
            inValue.artist = artist;
            inValue.albums = albums;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).postArtist(inValue);
            artist = retVal.artist;
            message = retVal.message;
            return retVal.dataUsed;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistResponse> postArtistAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postArtistRequest request) {
            return base.Channel.postArtistAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.postAlbum(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumRequest request) {
            return base.Channel.postAlbum(request);
        }
        
        public bool postAlbum(bool overwriteIfExists, ref string artist, ref string album, ref int year, string asin, string[] songs, out string message) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumRequest();
            inValue.overwriteIfExists = overwriteIfExists;
            inValue.artist = artist;
            inValue.album = album;
            inValue.year = year;
            inValue.asin = asin;
            inValue.songs = songs;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).postAlbum(inValue);
            artist = retVal.artist;
            album = retVal.album;
            year = retVal.year;
            message = retVal.message;
            return retVal.dataUsed;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumResponse> postAlbumAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postAlbumRequest request) {
            return base.Channel.postAlbumAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.postSong(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongRequest request) {
            return base.Channel.postSong(request);
        }
        
        public bool postSong(bool overwriteIfExists, ref string artist, ref string song, string lyrics, string language, string[] onAlbums, out string message) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongRequest();
            inValue.overwriteIfExists = overwriteIfExists;
            inValue.artist = artist;
            inValue.song = song;
            inValue.lyrics = lyrics;
            inValue.language = language;
            inValue.onAlbums = onAlbums;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).postSong(inValue);
            artist = retVal.artist;
            song = retVal.song;
            message = retVal.message;
            return retVal.dataUsed;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongResponse> postSongAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSongRequest request) {
            return base.Channel.postSongAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsResponse MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType.postSong_flags(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsRequest request) {
            return base.Channel.postSong_flags(request);
        }
        
        public bool postSong_flags(bool overwriteIfExists, ref string artist, ref string song, string lyrics, string[] onAlbums, string flags, string language, out string message) {
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsRequest inValue = new MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsRequest();
            inValue.overwriteIfExists = overwriteIfExists;
            inValue.artist = artist;
            inValue.song = song;
            inValue.lyrics = lyrics;
            inValue.onAlbums = onAlbums;
            inValue.flags = flags;
            inValue.language = language;
            MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsResponse retVal = ((MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.LyricWikiPortType)(this)).postSong_flags(inValue);
            artist = retVal.artist;
            song = retVal.song;
            message = retVal.message;
            return retVal.dataUsed;
        }
        
        public System.Threading.Tasks.Task<MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsResponse> postSong_flagsAsync(MediaCenter.LyricsFinder.Model.LyricServices.LyricWikiServiceReference.postSong_flagsRequest request) {
            return base.Channel.postSong_flagsAsync(request);
        }
    }
}
